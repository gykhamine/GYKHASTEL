import customtkinter as ctk
import os
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

class CryptographyApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        # Configuration de la fen√™tre principale
        self.title("Documentation Compl√®te : Cryptography")
        self.geometry("1200x900")
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("blue")

        # Cr√©ation du cadre de navigation lat√©ral
        self.navigation_frame = ctk.CTkFrame(self, corner_radius=0)
        self.navigation_frame.pack(side="left", fill="y", padx=(10, 0), pady=10)

        self.navigation_frame_label = ctk.CTkLabel(self.navigation_frame, text="Menu de navigation",
                                                   compound="left", font=ctk.CTkFont(size=20, weight="bold"))
        self.navigation_frame_label.pack(padx=20, pady=(20, 10))

        # Cr√©ation des boutons de navigation par section
        self.crypto_label = ctk.CTkLabel(self.navigation_frame, text="Cryptography", font=ctk.CTkFont(size=16, weight="bold"))
        self.crypto_label.pack(fill="x", padx=10, pady=(10, 0))
        self.crypto_buttons = self.create_buttons(self.navigation_frame, [
            ("Introduction", self.show_intro),
            ("Chiffrement de Fichiers (Sym√©trique)", self.show_file_encryption_symmetric),
            ("Chiffrement de Fichiers (Asym√©trique)", self.show_file_encryption_asymmetric),
            ("Chiffrement Sym√©trique (Fernet)", self.show_symmetric_encryption),
            ("Chiffrement Asym√©trique (RSA)", self.show_asymmetric_encryption),
            ("Fonctions de Hachage", self.show_hashing),
            ("Signatures Num√©riques", self.show_digital_signatures),
        ])

        # Cr√©ation du cadre principal pour le contenu
        self.content_frame = ctk.CTkFrame(self, corner_radius=0)
        self.content_frame.pack(side="right", fill="both", expand=True, padx=(0, 10), pady=10)
        
        self.content_textbox = ctk.CTkTextbox(self.content_frame, wrap="word", font=ctk.CTkFont(size=14))
        self.content_textbox.pack(fill="both", expand=True, padx=10, pady=10)
        self.content_textbox.configure(state="disabled")
        
        # D√©marrage sur le premier onglet
        self.show_intro()

    def create_buttons(self, parent, button_list):
        buttons = []
        for text, command in button_list:
            button = ctk.CTkButton(parent, corner_radius=0, height=40, border_spacing=10, text=text,
                                   fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                   anchor="w", command=command)
            button.pack(fill="x", padx=10, pady=2)
            buttons.append(button)
        return buttons

    def set_content(self, title, text, code=None, explanation=None):
        self.content_textbox.configure(state="normal")
        self.content_textbox.delete("1.0", "end")
        
        self.content_textbox.insert("1.0", f"**{title}**\n\n{text}")
        if explanation:
            self.content_textbox.insert("end", f"\n\n**Explication du code :**\n{explanation}")
        if code:
            self.content_textbox.insert("end", f"\n\n```python\n{code}\n```")
        
        self.content_textbox.configure(state="disabled")

    def show_intro(self):
        content = (
            "**Introduction √† Cryptography.io** üîí\n\n"
            "La biblioth√®que **Cryptography** est un outil de pointe en Python pour la s√©curit√©. Elle fournit des primitives cryptographiques, des algorithmes standards et des impl√©mentations s√©curis√©es pour des t√¢ches telles que le chiffrement de donn√©es, la signature num√©rique et le hachage. Son API est divis√©e en deux couches : une API de haut niveau (comme **`Fernet`**), simple d'utilisation, et une API de bas niveau pour des besoins plus complexes et sur mesure."
        )
        self.set_content("Introduction", content)
    
    def show_file_encryption_symmetric(self):
        code_example = (
            "from cryptography.fernet import Fernet\n"
            "\n"
            "# --- Fonctions de chiffrement/d√©chiffrement de fichier ---\n"
            "def encrypt_file(filename, fernet):\n"
            "    # Ouvre le fichier en mode binaire 'rb' (read binary)\n"
            "    with open(filename, 'rb') as file:\n"
            "        # Lit tout le contenu du fichier dans la m√©moire\n"
            "        file_data = file.read()\n"
            "    # Chiffre les donn√©es lues en utilisant la cl√© Fernet\n"
            "    encrypted_data = fernet.encrypt(file_data)\n"
            "    # Ouvre un nouveau fichier pour l'√©criture binaire ('wb')\n"
            "    with open(filename + '.enc', 'wb') as file:\n"
            "        # √âcrit les donn√©es chiffr√©es dans le nouveau fichier\n"
            "        file.write(encrypted_data)\n"
            "    print(f'Fichier chiffr√© : {filename}.enc')\n"
            "\n"
            "def decrypt_file(filename, fernet):\n"
            "    # Ouvre le fichier chiffr√© en mode binaire\n"
            "    with open(filename, 'rb') as file:\n"
            "        encrypted_data = file.read()\n"
            "    # D√©chiffre les donn√©es en utilisant la m√™me cl√© Fernet\n"
            "    decrypted_data = fernet.decrypt(encrypted_data)\n"
            "    # Ouvre un nouveau fichier pour √©crire les donn√©es d√©chiffr√©es\n"
            "    with open(filename.replace('.enc', '.dec'), 'wb') as file:\n"
            "        file.write(decrypted_data)\n"
            "    print(f'Fichier d√©chiffr√© : {filename.replace('.enc', '.dec')}')\n"
            "\n"
            "# --- Utilisation --- (le fichier 'test.txt' doit exister)\n"
            "# Cr√©e une cl√© de chiffrement sym√©trique s√©curis√©e\n"
            "# key = Fernet.generate_key()\n"
            "# Initialise l'objet Fernet avec la cl√©\n"
            "# f = Fernet(key)\n"
            "# Appelle les fonctions (comment√© pour √©viter l'ex√©cution automatique)\n"
            "# encrypt_file('test.txt', f)\n"
            "# decrypt_file('test.txt.enc', f)\n"
        )
        explanation = (
            "Cette section montre comment utiliser l'API de haut niveau **`Fernet`** pour chiffrer et d√©chiffrer des fichiers. Cette m√©thode est recommand√©e pour sa simplicit√© et sa s√©curit√© par d√©faut.\n\n"
            "- **`Fernet.generate_key()` :** G√©n√®re une cl√© de 32 octets al√©atoires, s√©curis√©e et encod√©e en base64 URL-safe. **Il est crucial de stocker cette cl√© de mani√®re s√©curis√©e.**\n"
            "- **`Fernet(key)` :** Cr√©e une instance de Fernet. Cet objet g√®re le chiffrement et le d√©chiffrement.\n"
            "- **`with open(filename, 'rb') as file:` :** Ouvre le fichier en mode binaire de lecture. C'est essentiel car les donn√©es chiffr√©es ne sont pas du texte.\n"
            "- **`file.read()` :** Lit tout le contenu binaire du fichier en une seule fois. Attention aux tr√®s grands fichiers, car cela peut consommer beaucoup de m√©moire.\n"
            "- **`fernet.encrypt(file_data)` :** Prend les donn√©es binaires et les chiffre. Le r√©sultat est un 'token' qui inclut les donn√©es chiffr√©es, mais aussi des informations de s√©curit√© comme un horodatage et une signature HMAC pour v√©rifier l'int√©grit√©.\n"
            "- **`file.write(encrypted_data)` :** √âcrit les donn√©es chiffr√©es dans un nouveau fichier (`.enc`).\n"
            "- **`fernet.decrypt(encrypted_data)` :** D√©chiffre les donn√©es. Le processus v√©rifie l'int√©grit√© et l'horodatage. Si les donn√©es ont √©t√© alt√©r√©es, cette fonction l√®vera une exception, assurant que vous ne travaillez qu'avec des donn√©es authentiques."
        )
        self.set_content("Chiffrement de Fichiers (Sym√©trique)", explanation, code_example)

    def show_file_encryption_asymmetric(self):
        code_example = (
            "import os\n"
            "from cryptography.fernet import Fernet\n"
            "from cryptography.hazmat.primitives.asymmetric import rsa, padding\n"
            "from cryptography.hazmat.primitives import hashes\n"
            "from cryptography.hazmat.backends import default_backend\n\n"
            "# --- Fonctions de chiffrement/d√©chiffrement hybride ---\n"
            "# 1. Chiffrer la cl√© sym√©trique avec la cl√© publique RSA\n"
            "def encrypt_symmetric_key(public_key):\n"
            "    # G√©n√®re une cl√© Fernet (sym√©trique) pour le chiffrement du fichier\n"
            "    sym_key = Fernet.generate_key()\n"
            "    # Chiffre cette petite cl√© sym√©trique avec la cl√© publique RSA (rapide)\n"
            "    encrypted_sym_key = public_key.encrypt(\n"
            "        sym_key,\n"
            "        padding.OAEP(\n"
            "            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n"
            "            algorithm=hashes.SHA256(),\n"
            "            label=None\n"
            "        )\n"
            "    )\n"
            "    # Retourne la cl√© sym√©trique originale et sa version chiffr√©e\n"
            "    return sym_key, encrypted_sym_key\n"
            "\n"
            "# 2. D√©chiffrer la cl√© sym√©trique avec la cl√© priv√©e RSA\n"
            "def decrypt_symmetric_key(private_key, encrypted_sym_key):\n"
            "    # D√©chiffre la cl√© sym√©trique en utilisant la cl√© priv√©e RSA\n"
            "    decrypted_sym_key = private_key.decrypt(\n"
            "        encrypted_sym_key,\n"
            "        padding.OAEP(\n"
            "            mgf=padding.MGF1(algorithm=hashes.SHA256()),\n"
            "            algorithm=hashes.SHA256(),\n"
            "            label=None\n"
            "        )\n"
            "    )\n"
            "    return decrypted_sym_key\n"
            "\n"
            "# --- Utilisation --- (comment√© pour √©viter l'ex√©cution)\n"
            "# private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())\n"
            "# public_key = private_key.public_key()\n"
            "# sym_key, encrypted_sym_key = encrypt_symmetric_key(public_key)\n"
            "# decrypted_sym_key = decrypt_symmetric_key(private_key, encrypted_sym_key)\n"
            "# assert sym_key == decrypted_sym_key\n"
            "# print('La cl√© sym√©trique d√©chiffr√©e peut maintenant √™tre utilis√©e pour un fichier !')\n"
        )
        explanation = (
            "L'approche hybride est la solution standard pour chiffrer de grands fichiers avec la cryptographie asym√©trique.\n\n"
            "- **`rsa.generate_private_key(...)` :** G√©n√®re une paire de cl√©s RSA. L'ex√©cution est lente, mais n'est faite qu'une seule fois.\n"
            "- **`Fernet.generate_key()` :** G√©n√®re la cl√© sym√©trique qui va effectivement chiffrer le fichier. Cette cl√© est rapide √† cr√©er et √† utiliser.\n"
            "- **`public_key.encrypt(...)` :** C'est le c≈ìur de l'approche hybride. On chiffre la **petite cl√© sym√©trique** avec la cl√© publique RSA. C'est rapide et permet de la partager de mani√®re s√©curis√©e.\n"
            "- **`padding.OAEP(...)` :** Le remplissage (padding) est une √©tape de s√©curit√© indispensable. **OAEP** est le standard recommand√© pour le chiffrement RSA. `hashes.SHA256()` est l'algorithme de hachage utilis√© dans ce sch√©ma.\n"
            "- **`private_key.decrypt(...)` :** Seule la cl√© priv√©e peut d√©chiffrer la cl√© sym√©trique chiffr√©e. Une fois que c'est fait, on peut utiliser cette cl√© sym√©trique pour le chiffrement et le d√©chiffrement du gros fichier (comme vu dans la section pr√©c√©dente)."
        )
        self.set_content("Chiffrement de Fichiers (Asym√©trique)", explanation, code_example)
    
    def show_symmetric_encryption(self):
        code_example = (
            "from cryptography.fernet import Fernet\n\n"
            "# G√©n√®re une cl√© secr√®te\n"
            "key = Fernet.generate_key()\n"
            "# Cr√©e l'objet de chiffrement\n"
            "f = Fernet(key)\n"
            "# Message √† chiffrer (doit √™tre en octets)\n"
            "message = b'Un message secret a chiffrer'\n"
            "# Chiffre le message\n"
            "token = f.encrypt(message)\n"
            "# D√©chiffre le message\n"
            "decrypted_message = f.decrypt(token)\n"
            "print(f'Original : {message.decode()}')\n"
            "print(f'D√©chiffr√© : {decrypted_message.decode()}')\n"
        )
        explanation = (
            "Cette section est une introduction √† l'API de haut niveau **`Fernet`**, expliquant les principes de base du chiffrement sym√©trique.\n\n"
            "- **`Fernet.generate_key()` :** Cr√©e une cl√© al√©atoire. C'est la seule information secr√®te n√©cessaire.\n"
            "- **`Fernet(key)` :** Initialise l'objet Fernet. Il utilise la cl√© pour configurer l'algorithme de chiffrement.\n"
            "- **`b'...'` :** Indique que la cha√Æne de caract√®res est de type **bytes**. La cryptographie fonctionne sur les octets, pas sur les cha√Ænes de texte.\n"
            "- **`f.encrypt(message)` :** Chiffre les octets du message. Le r√©sultat est un jeton (`token`) qui contient les donn√©es chiffr√©es, un horodatage et une signature HMAC pour la s√©curit√©.\n"
            "- **`f.decrypt(token)` :** D√©chiffre le jeton et r√©cup√®re le message d'origine, apr√®s avoir valid√© son int√©grit√© et sa fra√Æcheur (via l'horodatage)."
        )
        self.set_content("Chiffrement Sym√©trique (Fernet)", explanation, code_example)
    
    def show_asymmetric_encryption(self):
        code_example = (
            "from cryptography.hazmat.primitives import serialization\n"
            "from cryptography.hazmat.primitives.asymmetric import rsa, padding\n"
            "from cryptography.hazmat.backends import default_backend\n"
            "from cryptography.hazmat.primitives import hashes\n\n"
            "# G√©n√®re une cl√© priv√©e RSA\n"
            "private_key = rsa.generate_private_key(\n"
            "    public_exponent=65537, key_size=2048, backend=default_backend()\n"
            ")\n"
            "# Extrait la cl√© publique de la cl√© priv√©e\n"
            "public_key = private_key.public_key()\n"
            "# Message √† chiffrer (petite quantit√©)\n"
            "message = b'Un petit message secret'\n"
            "# Chiffrement avec la cl√© publique\n"
            "ciphertext = public_key.encrypt(\n"
            "    message,\n"
            "    padding.OAEP(\n"
            "        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n"
            "        algorithm=hashes.SHA256(),\n"
            "        label=None\n"
            "    )\n"
            ")\n"
            "# D√©chiffrement avec la cl√© priv√©e\n"
            "decrypted_message = private_key.decrypt(\n"
            "    ciphertext,\n"
            "    padding.OAEP(\n"
            "        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n"
            "        algorithm=hashes.SHA256(),\n"
            "        label=None\n"
            "    )\n"
            ")\n"
            "print(f'Original : {message.decode()}')\n"
            "print(f'D√©chiffr√© : {decrypted_message.decode()}')\n"
        )
        explanation = (
            "Cette section explique le chiffrement asym√©trique avec RSA, un algorithme fondamental pour l'√©change de cl√©s et les signatures num√©riques.\n\n"
            "- **`rsa.generate_private_key(...)` :** G√©n√®re la **paire de cl√©s** (priv√©e et publique). `key_size=2048` est une taille standard et s√©curis√©e pour les cl√©s RSA.\n"
            "- **`private_key.public_key()` :** La cl√© publique peut √™tre d√©riv√©e de la cl√© priv√©e. Elle est destin√©e √† √™tre partag√©e publiquement.\n"
            "- **`public_key.encrypt(...)` :** Utilise la cl√© publique pour chiffrer les donn√©es. Seule la cl√© priv√©e correspondante peut d√©chiffrer ce message.\n"
            "- **`padding.OAEP(...)` :** Le remplissage (`padding`) est une technique indispensable pour la s√©curit√© du chiffrement RSA. Sans un bon padding, une attaque peut r√©cup√©rer les donn√©es chiffr√©es. OAEP est le standard recommand√©.\n"
            "- **`private_key.decrypt(...)` :** Utilise la cl√© priv√©e pour d√©chiffrer les donn√©es chiffr√©es par la cl√© publique correspondante. C'est l'op√©ration inverse du chiffrement."
        )
        self.set_content("Chiffrement Asym√©trique (RSA)", explanation, code_example)

    def show_hashing(self):
        code_example = (
            "from cryptography.hazmat.primitives import hashes\n\n"
            "# Cr√©e un objet de hachage SHA256\n"
            "digest = hashes.Hash(hashes.SHA256())\n"
            "# Ajoute les donn√©es √† hacher\n"
            "digest.update(b'un message a hacher')\n"
            "# Finalise le calcul pour obtenir le hachage\n"
            "hashed_data = digest.finalize()\n"
            "\n"
            "print(f'Donn√©es hach√©es (SHA256) : {hashed_data.hex()}')\n"
        )
        explanation = (
            "Le hachage est un processus √† sens unique qui produit une empreinte num√©rique unique pour un ensemble de donn√©es. Il est utilis√© pour v√©rifier l'int√©grit√©, mais pas la confidentialit√© des donn√©es.\n\n"
            "- **`hashes.Hash(hashes.SHA256())` :** Cr√©e un objet qui g√©rera le calcul du hachage. On sp√©cifie l'algorithme √† utiliser, ici **SHA256**.\n"
            "- **`digest.update(b'...')` :** Ajoute des donn√©es √† l'objet de hachage. On peut appeler cette m√©thode plusieurs fois pour hacher un flux de donn√©es (streaming).\n"
            "- **`digest.finalize()` :** Calcule le hachage final. Apr√®s cette √©tape, l'objet ne peut plus √™tre modifi√© et renvoie l'empreinte num√©rique."
        )
        self.set_content("Fonctions de Hachage (SHA256)", explanation, code_example)

    def show_digital_signatures(self):
        code_example = (
            "from cryptography.hazmat.primitives import hashes\n"
            "from cryptography.hazmat.primitives.asymmetric import rsa, padding\n"
            "from cryptography.hazmat.backends import default_backend\n\n"
            "# G√©n√®re les cl√©s (priv√©e et publique)\n"
            "private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=default_backend())\n"
            "public_key = private_key.public_key()\n"
            "# Donn√©es √† signer\n"
            "data = b'Des donnees a signer'\n"
            "# Cr√©e la signature avec la cl√© priv√©e\n"
            "signature = private_key.sign(\n"
            "    data,\n"
            "    padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH),\n"
            "    hashes.SHA256()\n"
            ")\n"
            "# V√©rifie la signature avec la cl√© publique\n"
            "try:\n"
            "    public_key.verify(\n"
            "        signature, data,\n"
            "        padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH),\n"
            "        hashes.SHA256()\n"
            "    )\n"
            "    print('La signature est valide.')\n"
            "except Exception:\n"
            "    print('La signature est invalide.')\n"
        )
        explanation = (
            "Une signature num√©rique garantit l'authenticit√© et l'int√©grit√© d'un message. Elle prouve que le message a √©t√© cr√©√© par le d√©tenteur de la cl√© priv√©e et qu'il n'a pas √©t√© alt√©r√©.\n\n"
            "- **`private_key.sign(...)` :** La signature est cr√©√©e en utilisant la **cl√© priv√©e** de l'exp√©diteur. Le message est hach√©, puis ce hachage est chiffr√© avec la cl√© priv√©e. Le `padding.PSS` est le sch√©ma de remplissage recommand√© pour les signatures RSA.\n"
            "- **`public_key.verify(...)` :** Le destinataire utilise la **cl√© publique** de l'exp√©diteur pour v√©rifier la signature. Cette fonction recalcule le hachage du message, le compare avec celui d√©chiffr√© depuis la signature. Si les deux correspondent, la signature est valide."
        )
        self.set_content("Signatures Num√©riques", explanation, code_example)

if __name__ == "__main__":
    app = CryptographyApp()
    app.mainloop()