import customtkinter as ctk
import sqlite3
from tkinter import messagebox

class SQLiteApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        # --- Configuration de la fen√™tre principale ---
        self.title("Guide Ultime : Introduction √† SQLite")
        self.geometry("1200x900")
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("green")

        # --- Cr√©ation du cadre de navigation lat√©ral ---
        self.navigation_frame = ctk.CTkFrame(self, corner_radius=0)
        self.navigation_frame.pack(side="left", fill="y", padx=(10, 0), pady=10)

        self.navigation_frame_label = ctk.CTkLabel(self.navigation_frame, text="Menu de navigation",
                                                   compound="left", font=ctk.CTkFont(size=20, weight="bold"))
        self.navigation_frame_label.pack(padx=20, pady=(20, 10))

        # --- Cr√©ation des boutons de navigation ---
        self.intro_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Introduction √† SQLite",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.show_intro)
        self.intro_button.pack(fill="x", padx=10, pady=5)
        
        self.connection_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Connexion et Cr√©ation",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.show_connection)
        self.connection_button.pack(fill="x", padx=10, pady=5)
        
        self.crud_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Op√©rations CRUD",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.show_crud)
        self.crud_button.pack(fill="x", padx=10, pady=5)

        self.transaction_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Transactions et Erreurs",
                                            fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                            anchor="w", command=self.show_transaction)
        self.transaction_button.pack(fill="x", padx=10, pady=5)
        
        self.memory_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Gestion de la RAM",
                                            fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                            anchor="w", command=self.show_memory_management)
        self.memory_button.pack(fill="x", padx=10, pady=5)

        self.advanced_query_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Requ√™tes avanc√©es",
                                            fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                            anchor="w", command=self.show_advanced_query)
        self.advanced_query_button.pack(fill="x", padx=10, pady=5)

        self.close_db_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Fermer la BDD",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.close_database)
        self.close_db_button.pack(fill="x", padx=10, pady=5)

        # --- Cr√©ation du cadre principal pour le contenu ---
        self.content_frame = ctk.CTkFrame(self, corner_radius=0)
        self.content_frame.pack(side="right", fill="both", expand=True, padx=(0, 10), pady=10)
        
        self.content_textbox = ctk.CTkTextbox(self.content_frame, wrap="word", font=ctk.CTkFont(size=14))
        self.content_textbox.pack(fill="both", expand=True, padx=10, pady=10)
        self.content_textbox.configure(state="disabled")
        
        # --- Connexion √† la base de donn√©es au d√©marrage ---
        self.db_path = "mon_application.db"
        self.conn = None
        self.cursor = None
        self.show_intro()

    def set_content(self, title, text, code=None):
        self.content_textbox.configure(state="normal")
        self.content_textbox.delete("1.0", "end")
        
        self.content_textbox.insert("1.0", f"**{title}**\n\n{text}")
        if code:
            self.content_textbox.insert("end", f"\n\n```python\n{code}\n```")
        
        self.content_textbox.configure(state="disabled")

    def show_intro(self):
        content = (
            "**Introduction √† SQLite** üóÉÔ∏è\n\n"
            "**SQLite** est une biblioth√®que logicielle qui impl√©mente un syst√®me de gestion de base de donn√©es relationnelle (`SGBDR`) l√©ger, autonome, sans serveur et sans configuration. Il est tr√®s populaire pour les applications mobiles, les navigateurs web (Firefox, Chrome), et les syst√®mes embarqu√©s, mais aussi pour les prototypes ou les petites applications de bureau en Python.\n\n"
            "**Avantages de SQLite :**\n"
            "- **Sans serveur :** Contrairement √† MySQL ou PostgreSQL, SQLite ne n√©cessite pas de serveur distinct. La base de donn√©es est stock√©e dans un simple fichier sur le disque.\n"
            "- **Int√©gration facile :** La biblioth√®que est incluse par d√©faut dans la plupart des installations Python, vous n'avez donc rien √† installer de plus.\n"
            "- **L√©ger et rapide :** C'est une solution id√©ale pour les applications qui ne g√®rent pas un trafic important d'utilisateurs en simultan√©."
        )
        self.set_content("Introduction √† SQLite", content)
    
    def show_connection(self):
        code_example = (
            "import sqlite3\n\n"
            "# 1. Se connecter √† une base de donn√©es. Si elle n'existe pas, elle sera cr√©√©e.\n"
            "conn = sqlite3.connect('mon_application.db')\n\n"
            "# 2. Cr√©er un objet curseur pour ex√©cuter des requ√™tes SQL.\n"
            "cursor = conn.cursor()\n\n"
            "# 3. Ex√©cuter une requ√™te pour cr√©er une table 'utilisateurs'.\n"
            "cursor.execute('''\n"
            "    CREATE TABLE IF NOT EXISTS utilisateurs (\n"
            "        id INTEGER PRIMARY KEY,\n"
            "        nom TEXT NOT NULL,\n"
            "        age INTEGER\n"
            "    )\n"
            "''')\n\n"
            "# 4. Valider les changements (sinon la table ne sera pas enregistr√©e).\n"
            "conn.commit()\n\n"
            "# 5. Fermer la connexion.\n"
            "conn.close()"
        )
        content = (
            "**Connexion, cr√©ation de tables et fermeture** üèóÔ∏è\n\n"
            "Pour interagir avec une base de donn√©es SQLite, vous devez suivre un processus simple et standard.\n\n"
            "**1. La connexion (`sqlite3.connect()`) :**\n"
            "   - Cette fonction √©tablit une connexion √† un fichier de base de donn√©es. Si le fichier n'existe pas, SQLite le cr√©e automatiquement. Si vous passez `:memory:` comme nom de fichier, la base de donn√©es est cr√©√©e en m√©moire vive et sera effac√©e √† la fermeture.\n\n"
            "**2. L'objet curseur (`conn.cursor()`) :**\n"
            "   - Le curseur est un objet qui vous permet d'ex√©cuter des requ√™tes SQL et de naviguer dans les r√©sultats.\n\n"
            "**3. Ex√©cution d'une requ√™te (`cursor.execute()`) :**\n"
            "   - C'est la fonction principale pour envoyer n'importe quelle commande SQL. L'exemple montre la cr√©ation d'une table avec trois colonnes : `id`, `nom` et `age`.\n\n"
            "**4. Validation (`conn.commit()`) et fermeture (`conn.close()`) :**\n"
            "   - `conn.commit()` est essentiel ! Il enregistre de mani√®re permanente toutes les modifications effectu√©es depuis le dernier commit. Ne pas l'appeler signifie que vos modifications seront perdues. Une fois le travail termin√©, `conn.close()` lib√®re la connexion √† la base de donn√©es."
        )
        self.set_content("Connexion et Cr√©ation", content, code_example)
        
    def show_crud(self):
        code_example = (
            "import sqlite3\n\n"
            "conn = sqlite3.connect('mon_application.db')\n"
            "cursor = conn.cursor()\n\n"
            "# --- 1. CREATE (Insertion de donn√©es) ---\n"
            "# Utilisation d'un param√®tre (√©vite l'injection SQL)\n"
            "cursor.execute(\"INSERT INTO utilisateurs (nom, age) VALUES (?, ?)\", ('Alice', 30))\n"
            "conn.commit()\n"
            "print('Alice a √©t√© ins√©r√©e.')\n\n"
            "# --- 2. READ (Lecture de donn√©es) ---\n"
            "cursor.execute(\"SELECT * FROM utilisateurs\")\n"
            "utilisateurs = cursor.fetchall()\n"
            "for user in utilisateurs:\n"
            "    print(user)\n\n"
            "# --- 3. UPDATE (Mise √† jour) ---\n"
            "cursor.execute(\"UPDATE utilisateurs SET age = ? WHERE nom = ?\", (31, 'Alice'))\n"
            "conn.commit()\n"
            "print('L\\'√¢ge d\\'Alice a √©t√© mis √† jour.')\n\n"
            "# --- 4. DELETE (Suppression) ---\n"
            "cursor.execute(\"DELETE FROM utilisateurs WHERE nom = ?\", ('Alice',))\n"
            "conn.commit()\n"
            "print('Alice a √©t√© supprim√©e.')\n\n"
            "conn.close()"
        )
        content = (
            "**Les op√©rations CRUD (Create, Read, Update, Delete)** ‚öôÔ∏è\n\n"
            "Les op√©rations CRUD sont les quatre fonctions de base et essentielles de toute base de donn√©es. SQLite facilite grandement leur impl√©mentation.\n\n"
            "**1. Cr√©ation (`INSERT`) :**\n"
            "   - Pour ins√©rer de nouvelles donn√©es, on utilise la commande SQL `INSERT`. Il est fortement recommand√© d'utiliser des **param√®tres** (`?`) √† la place de la concat√©nation de cha√Ænes, pour pr√©venir les attaques par **injection SQL**.\n\n"
            "**2. Lecture (`SELECT`) :**\n"
            "   - `SELECT` est utilis√©e pour r√©cup√©rer des donn√©es. Les m√©thodes du curseur comme `fetchone()`, `fetchall()` ou `fetchmany()` permettent de r√©cup√©rer les r√©sultats de la requ√™te. `fetchall()` renvoie une liste de tuples, o√π chaque tuple est une ligne de la table.\n\n"
            "**3. Mise √† jour (`UPDATE`) :**\n"
            "   - La commande `UPDATE` permet de modifier des donn√©es existantes. La clause `WHERE` est cruciale pour sp√©cifier quelles lignes doivent √™tre modifi√©es.\n\n"
            "**4. Suppression (`DELETE`) :**\n"
            "   - La commande `DELETE` supprime des lignes. Sans la clause `WHERE`, elle effacerait *toutes* les donn√©es de la table."
        )
        self.set_content("Op√©rations CRUD", content, code_example)

    def show_transaction(self):
        code_example = (
            "import sqlite3\n\n"
            "conn = sqlite3.connect('mon_application.db')\n"
            "cursor = conn.cursor()\n\n"
            "# --- Transaction avec commit ---\n"
            "try:\n"
            "    cursor.execute(\"INSERT INTO utilisateurs (nom, age) VALUES (?, ?)\", ('Bob', 25))\n"
            "    conn.commit()  # Sauvegarde la modification\n"
            "    print('Bob a √©t√© ajout√© avec succ√®s.')\n"
            "except sqlite3.Error as e:\n"
            "    print(f'Erreur: {e}')\n"
            "    conn.rollback() # Annule la modification si elle √©choue\n\n"
            "# --- Transaction qui √©choue avec rollback ---\n"
            "try:\n"
            "    # Cette requ√™te va √©chouer (age doit √™tre un nombre)\n"
            "    cursor.execute(\"INSERT INTO utilisateurs (nom, age) VALUES (?, ?)\", ('Charlie', 'invalide'))\n"
            "    conn.commit() \n"
            "except sqlite3.Error as e:\n"
            "    print(f\"Erreur: {e}\")\n"
            "    print(\"La transaction a √©t√© annul√©e (rollback).\")\n"
            "    conn.rollback() # Annule la tentative d'insertion\n\n"
            "conn.close()"
        )
        content = (
            "**Transactions et gestion des erreurs** üõ°Ô∏è\n\n"
            "En base de donn√©es, une **transaction** est une s√©rie d'op√©rations ex√©cut√©es comme une seule unit√© logique de travail. Soit toutes les op√©rations r√©ussissent (`commit`), soit aucune ne se produit (`rollback`). Cela garantit l'int√©grit√© des donn√©es.\n\n"
            "**1. Le `commit()` :**\n"
            "   - `conn.commit()` valide une transaction. Toutes les requ√™tes `INSERT`, `UPDATE` ou `DELETE` effectu√©es avant le `commit` sont enregistr√©es de mani√®re permanente.\n\n"
            "**2. Le `rollback()` :**\n"
            "   - Si une erreur se produit pendant une transaction, `conn.rollback()` est appel√© pour annuler toutes les op√©rations en attente. La base de donn√©es revient √† l'√©tat o√π elle se trouvait avant le d√©but de la transaction.\n\n"
            "**3. Gestion des erreurs (`try...except`) :**\n"
            "   - Il est vivement recommand√© d'utiliser un bloc `try...except` pour encadrer vos transactions. En cas d'exception `sqlite3.Error`, vous pouvez appeler `conn.rollback()` pour annuler la transaction et √©viter de corrompre la base de donn√©es. C'est une pratique essentielle pour construire des applications robustes."
        )
        self.set_content("Transactions et Erreurs", content, code_example)
    
    def show_memory_management(self):
        code_example = (
            "import sqlite3\n\n"
            "# Cr√©er une base de donn√©es en m√©moire vive\n"
            "print('Cr√©ation d\\'une base de donn√©es en m√©moire vive : :memory:')\n"
            "conn_ram = sqlite3.connect(':memory:')\n"
            "cursor_ram = conn_ram.cursor()\n\n"
            "cursor_ram.execute(\"CREATE TABLE utilisateurs_temp (id INTEGER, nom TEXT)\")\n"
            "cursor_ram.execute(\"INSERT INTO utilisateurs_temp VALUES (1, 'Data-RAM')\")\n"
            "conn_ram.commit()\n\n"
            "cursor_ram.execute(\"SELECT * FROM utilisateurs_temp\")\n"
            "print('R√©sultat de la BDD en RAM:', cursor_ram.fetchall())\n\n"
            "# Fermer la connexion : toutes les donn√©es sont perdues !\n"
            "conn_ram.close()\n"
            "print('La connexion a √©t√© ferm√©e. Les donn√©es en RAM sont maintenant effac√©es.')\n\n"
            "# --- Optimisation de la performance (m√©moire) --- \n"
            "conn = sqlite3.connect('mon_application.db')\n"
            "cursor = conn.cursor()\n"
            "print('\\n--- Optimisation du cache de pages ---')\n"
            "# D√©finir la taille du cache en kilooctets (ici 32 Mo)\n"
            "cursor.execute('PRAGMA cache_size = 32768')\n"
            "print('Taille du cache de pages d√©finie sur 32 Mo.')\n"
            "conn.close()\n"
        )
        content = (
            "**Gestion de la m√©moire RAM et des performances** üöÄ\n\n"
            "M√™me si SQLite stocke les donn√©es sur le disque, il utilise la m√©moire vive (RAM) pour des raisons de performance. Comprendre comment il g√®re cette m√©moire est crucial pour l'optimisation.\n\n"
            "**1. Base de donn√©es en m√©moire vive (`:memory:`) :**\n"
            "   - En passant le nom de fichier `:memory:` √† `sqlite3.connect()`, vous cr√©ez une base de donn√©es qui r√©side enti√®rement en RAM. C'est extr√™mement rapide car il n'y a pas d'acc√®s disque, mais toutes les donn√©es sont **perdues d√®s que la connexion est ferm√©e**. C'est parfait pour des tests, des calculs temporaires ou des applications o√π la persistance n'est pas n√©cessaire.\n\n"
            "**2. Le cache de pages (Page Cache) :**\n"
            "   - SQLite ne lit ou n'√©crit pas les donn√©es octet par octet sur le disque, mais par blocs appel√©s **pages**. Il stocke ces pages dans un **cache de pages** en m√©moire pour acc√©l√©rer les op√©rations. Plus la taille du cache est grande, moins il y a d'acc√®s au disque, ce qui am√©liore la performance.\n"
            "   - La commande `PRAGMA cache_size = -N` (o√π N est le nombre de pages) ou `PRAGMA cache_size = taille_en_ko` est utilis√©e pour ajuster cette taille. La valeur par d√©faut est g√©n√©ralement de 2000 pages (environ 1.5 Mo), mais vous pouvez l'augmenter pour les applications √† forte intensit√© de lecture.\n\n"
            "**3. Autres PRAGMA :**\n"
            "   - **`PRAGMA synchronous` :** Contr√¥le la synchronisation du fichier de la base de donn√©es avec le disque. Une valeur de `OFF` est plus rapide mais moins s√ªre en cas de panne de courant. `FULL` est plus s√ªr mais plus lent.\n"
            "   - **`PRAGMA journal_mode` :** G√®re la mani√®re dont les transactions sont enregistr√©es. Le mode `WAL` (`Write-Ahead Logging`) est souvent plus performant que le mode par d√©faut (`DELETE`) pour les applications avec de nombreuses lectures et √©critures concurrentes."
        )
        self.set_content("Gestion de la RAM", content, code_example)

    def show_advanced_query(self):
        code_example = (
            "import sqlite3\n\n"
            "conn = sqlite3.connect('mon_application.db')\n"
            "cursor = conn.cursor()\n\n"
            "# Insertion de donn√©es d'exemple pour les agr√©gats\n"
            "cursor.executemany(\"INSERT INTO utilisateurs (nom, age) VALUES (?, ?)\", \n"
            "                   [('David', 22), ('Emma', 28), ('Franck', 31), ('Olivia', 22)])\n"
            "conn.commit()\n\n"
            "print('--- Fonctions d\\'agr√©gation ---')\n"
            "# Nombre total d'utilisateurs\n"
            "cursor.execute(\"SELECT COUNT(*) FROM utilisateurs\")\n"
            "count = cursor.fetchone()[0]\n"
            "print(f\"Nombre total d'utilisateurs: {count}\")\n\n"
            "# √Çge moyen des utilisateurs\n"
            "cursor.execute(\"SELECT AVG(age) FROM utilisateurs\")\n"
            "avg_age = cursor.fetchone()[0]\n"
            "print(f\"√Çge moyen: {avg_age:.2f}\")\n\n"
            "# √Çge maximum\n"
            "cursor.execute(\"SELECT MAX(age) FROM utilisateurs\")\n"
            "max_age = cursor.fetchone()[0]\n"
            "print(f\"√Çge maximum: {max_age}\")\n\n"
            "print('\\n--- Clauses WHERE et ORDER BY ---')\n"
            "# S√©lectionner les noms et √¢ges des personnes tri√©es par √¢ge d√©croissant\n"
            "cursor.execute(\"SELECT nom, age FROM utilisateurs ORDER BY age DESC\")\n"
            "print('Utilisateurs (par √¢ge d√©croissant):', cursor.fetchall())\n\n"
            "conn.close()"
        )
        content = (
            "**Requ√™tes avanc√©es et Fonctions d'agr√©gation** üìä\n\n"
            "Au-del√† des op√©rations de base, SQLite supporte un large √©ventail de requ√™tes SQL pour filtrer, trier et agr√©ger vos donn√©es. En voici quelques exemples pratiques.\n\n"
            "**1. Fonctions d'agr√©gation (`COUNT`, `AVG`, `MAX`, etc.) :**\n"
            "   - Les fonctions d'agr√©gation calculent une valeur unique √† partir d'un ensemble de valeurs. `COUNT(*)` est utilis√© pour compter le nombre de lignes, `AVG(colonne)` pour la moyenne, `MAX(colonne)` pour la valeur maximale, et `SUM(colonne)` pour la somme.\n\n"
            "**2. Tri (`ORDER BY`) :**\n"
            "   - La clause `ORDER BY` trie les r√©sultats d'une requ√™te en fonction d'une ou plusieurs colonnes. C'est essentiel pour pr√©senter les donn√©es de mani√®re structur√©e.\n"
            "   - `ORDER BY age DESC` trie par √¢ge du plus grand au plus petit (d√©croissant), tandis que `ASC` (par d√©faut) trie dans l'ordre croissant.\n\n"
            "**3. Utilisation de `executemany()` pour l'insertion en masse :**\n"
            "   - La m√©thode `cursor.executemany()` est tr√®s utile pour ins√©rer plusieurs lignes √† la fois, ce qui est beaucoup plus performant qu'une s√©rie d'appels `execute()` individuels."
        )
        self.set_content("Requ√™tes avanc√©es", content, code_example)
        
    def close_database(self):
        if self.conn:
            self.conn.close()
            messagebox.showinfo("Fermeture de la BDD", "La connexion √† la base de donn√©es a √©t√© ferm√©e.")
            self.conn = None
            self.cursor = None
        else:
            messagebox.showinfo("Fermeture de la BDD", "Aucune connexion n'est active.")

if __name__ == "__main__":
    app = SQLiteApp()
    app.mainloop()