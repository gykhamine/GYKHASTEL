import customtkinter as ctk

class GrubApp(ctk.CTk):
    def __init__(self):
        super().__init__()

        # --- Configuration de la fen√™tre principale ---
        self.title("Guide Ultime : GRUB2 et le mode Rescue")
        self.geometry("1200x900")
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("green")

        # --- Cr√©ation du cadre de navigation lat√©ral ---
        self.navigation_frame = ctk.CTkFrame(self, corner_radius=0)
        self.navigation_frame.pack(side="left", fill="y", padx=(10, 0), pady=10)

        self.navigation_frame_label = ctk.CTkLabel(self.navigation_frame, text="Menu de navigation",
                                                   compound="left", font=ctk.CTkFont(size=20, weight="bold"))
        self.navigation_frame_label.pack(padx=20, pady=(20, 10))

        # --- Cr√©ation des boutons de navigation ---
        self.home_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Introduction et Concepts",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.show_intro)
        self.home_button.pack(fill="x", padx=10, pady=5)
        
        self.files_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Configuration et Fichiers",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.show_config_files)
        self.files_button.pack(fill="x", padx=10, pady=5)
        
        self.errors_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Messages d'Erreur",
                                          fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                          anchor="w", command=self.show_error_messages)
        self.errors_button.pack(fill="x", padx=10, pady=5)

        self.commands_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Mode Rescue : Commandes",
                                            fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                            anchor="w", command=self.show_commands)
        self.commands_button.pack(fill="x", padx=10, pady=5)

        self.manual_boot_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="D√©marrage Manuel",
                                               fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                               anchor="w", command=self.show_manual_boot)
        self.manual_boot_button.pack(fill="x", padx=10, pady=5)

        self.repair_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="R√©paration D√©finitive",
                                           fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                           anchor="w", command=self.show_repair)
        self.repair_button.pack(fill="x", padx=10, pady=5)
        
        self.architecture_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Architecture x86 vs x64",
                                                 fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                 anchor="w", command=self.show_architecture)
        self.architecture_button.pack(fill="x", padx=10, pady=5)
        
        self.disks_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Types de disques et partitions",
                                                 fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                 anchor="w", command=self.show_disks)
        self.disks_button.pack(fill="x", padx=10, pady=5)
        
        self.troubleshooting_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="Sc√©narios de D√©pannage",
                                                 fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                                 anchor="w", command=self.show_troubleshooting)
        self.troubleshooting_button.pack(fill="x", padx=10, pady=5)
        
        self.faq_button = ctk.CTkButton(self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="FAQ et Notions Avanc√©es",
                                       fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"),
                                       anchor="w", command=self.show_faq)
        self.faq_button.pack(fill="x", padx=10, pady=5)

        # --- Cr√©ation du cadre principal pour le contenu ---
        self.content_frame = ctk.CTkFrame(self, corner_radius=0)
        self.content_frame.pack(side="right", fill="both", expand=True, padx=(0, 10), pady=10)
        
        self.content_textbox = ctk.CTkTextbox(self.content_frame, wrap="word", font=ctk.CTkFont(size=14))
        self.content_textbox.pack(fill="both", expand=True, padx=10, pady=10)
        self.content_textbox.configure(state="disabled")

        # --- D√©marrage sur le premier onglet ---
        self.show_intro()
        
    def set_content(self, title, text):
        self.content_textbox.configure(state="normal")
        self.content_textbox.delete("1.0", "end")
        self.content_textbox.insert("1.0", f"**{title}**\n\n{text}")
        self.content_textbox.configure(state="disabled")

    def show_intro(self):
        content = (
            "**Introduction √† GRUB2 et au mode `grub rescue`** üöÄ\n\n"
            "GRUB2 (GRand Unified Bootloader version 2) est le programme de gestion de d√©marrage standard sur la plupart des distributions Linux. Son r√¥le est de prendre le contr√¥le d√®s l'allumage de l'ordinateur, d'afficher un menu, et de charger le noyau du syst√®me d'exploitation que vous choisissez.\n\n"
            "Le **mode `grub rescue`** est un environnement de secours qui se d√©clenche lorsque GRUB2 ne parvient pas √† trouver ses fichiers de configuration essentiels. Cela peut arriver si une partition est supprim√©e, si une mise √† jour a √©chou√©, ou si un autre OS a √©cras√© l'amorce de d√©marrage. Cet environnement est tr√®s limit√©, mais il contient les outils de base pour identifier les partitions et d√©marrer manuellement votre syst√®me."
            "\n\n**Concepts Cl√©s :**\n"
            "- **MBR (Master Boot Record)** : Un secteur de d√©marrage sur les anciens disques (BIOS). GRUB2 peut y √™tre install√© pour d√©marrer le syst√®me.\n"
            "- **UEFI (Unified Extensible Firmware Interface)** : Le successeur du BIOS. Il utilise une partition sp√©ciale, la **ESP (EFI System Partition)**, pour stocker les chargeurs de d√©marrage.\n"
            "- **GPT (GUID Partition Table)** : Le sch√©ma de partitionnement moderne, utilis√© avec l'UEFI.\n"
            "- **GRUB.cfg** : Le fichier de configuration final, g√©n√©r√© automatiquement. **Ne jamais le modifier directement.**"
        )
        self.set_content("Introduction et Concepts Cl√©s", content)

    def show_error_messages(self):
        content = (
            "**Messages d'erreur courants du mode `grub rescue`** üö®\n\n"
            "Comprendre le message d'erreur est la premi√®re √©tape pour r√©soudre le probl√®me. Voici les plus fr√©quents :\n\n"
            "**1. `error: file '/boot/grub2/i386-pc/normal.mod' not found`**\n"
            "   - **Signification** : GRUB a d√©marr√© mais ne parvient pas √† trouver ses fichiers modules essentiels, en particulier le module `normal.mod` qui lui permet de charger l'interface compl√®te. Le chemin indiqu√© (`i386-pc`) est typique des syst√®mes BIOS.\n"
            "   - **Causes possibles** : Le chemin vers le r√©pertoire de GRUB est incorrect, la partition de d√©marrage a √©t√© supprim√©e ou corrompue.\n"
            "   - **Solution** : Vous devez d'abord localiser le bon chemin avec la commande `ls` puis utiliser `set root` et `set prefix` pour le corriger temporairement.\n\n"
            "**2. `error: unknown filesystem`**\n"
            "   - **Signification** : GRUB ne reconna√Æt pas le syst√®me de fichiers de la partition sur laquelle il essaie de lire ses fichiers (par exemple, `ext4`).\n"
            "   - **Causes possibles** : Le module de GRUB n√©cessaire pour lire le syst√®me de fichiers n'a pas √©t√© charg√© ou la partition est corrompue.\n"
            "   - **Solution** : Essayez de charger manuellement le module appropri√© (par exemple, `insmod ext2` pour une partition `ext4`).\n\n"
            "**3. `error: no such device: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX`**\n"
            "   - **Signification** : GRUB recherche une partition par son UUID (identifiant unique), mais ne la trouve pas. Cela se produit si la partition a √©t√© reformat√©e ou supprim√©e.\n"
            "   - **Solution** : Vous devez trouver la nouvelle d√©signation de la partition avec `ls` (par exemple, `(hd0,gpt2)`) et l'utiliser pour la commande `set root`.\n\n"
            "**4. `Error 15: File not found` (ancienne erreur GRUB)**\n"
            "   - **Signification** : Le fichier du noyau (`vmlinuz`) ou le fichier de configuration est introuvable. C'est une erreur des anciennes versions de GRUB (GRUB Legacy).\n"
            "   - **Solution** : La logique de d√©pannage reste la m√™me : utiliser `ls` pour localiser le fichier, puis le charger manuellement.\n\n"
            "**5. `Error 17: Cannot mount selected partition` (ancienne erreur GRUB)**\n"
            "   - **Signification** : GRUB ne peut pas monter ou lire la partition s√©lectionn√©e. La partition peut √™tre corrompue ou avoir un syst√®me de fichiers inconnu.\n"
            "   - **Solution** : V√©rifiez l'int√©grit√© de votre partition depuis un live USB avec `fsck`."
        )
        self.set_content("Messages d'erreur courants", content)

    def show_config_files(self):
        content = (
            "**Fichiers de Configuration et la logique de GRUB2** üìñ\n\n"
            "Comprendre o√π GRUB2 stocke ses informations est essentiel pour le d√©pannage.\n\n"
            "**1. `/etc/default/grub` : Le fichier de configuration global**\n"
            "   - Contient les variables d'apparence et de comportement du menu.\n"
            "   - Exemples de variables : `GRUB_TIMEOUT=5`, `GRUB_DEFAULT=saved`, `GRUB_CMDLINE_LINUX=\"rhgb quiet\"`.\n"
            "   - **Important :** Toute modification de ce fichier n√©cessite de lancer `grub2-mkconfig` pour √™tre prise en compte.\n\n"
            "**2. `/etc/grub.d/ : Les scripts g√©n√©rateurs**\n"
            "   - Ce r√©pertoire contient des scripts qui sont ex√©cut√©s dans un ordre num√©rique pour construire `grub.cfg`.\n"
            "   - `10_linux` : D√©tecte les noyaux Linux install√©s.\n"
            "   - `30_os-prober` : Cherche et ajoute d'autres syst√®mes d'exploitation (Windows, autres Linux).\n"
            "   - `40_custom` : Le script id√©al pour ajouter vos propres entr√©es de d√©marrage manuelles.\n\n"
            "**3. `/boot/grub2/grub.cfg : Le fichier final**\n"
            "   - C'est le r√©sultat de l'ex√©cution des scripts de `/etc/grub.d/`.\n"
            "   - C'est le fichier que GRUB2 lit pour afficher le menu. Il est g√©n√©r√© automatiquement et ne doit jamais √™tre √©dit√© √† la main."
        )
        self.set_content("Fichiers de Configuration et la logique de GRUB2", content)
    
    def show_commands(self):
        content = (
            "**Commandes de d√©pannage dans le mode `grub rescue`** ‚öôÔ∏è\n\n"
            "Voici une explication plus approfondie des commandes disponibles.\n\n"
            "**`ls` : La commande de reconnaissance**\n"
            "   - **Fonction :** Affiche la liste des disques et partitions connus par GRUB. C'est l'√©tape de diagnostic principale pour trouver o√π se trouve votre OS.\n"
            "   - **Syntaxe :** `ls` pour les disques. `ls (hd0,gpt1)/` pour explorer une partition.\n"
            "   - **Exemple :** Si `ls (hd0,gpt2)/` affiche des r√©pertoires comme `boot`, `etc`, `home`, il y a de fortes chances que ce soit votre partition racine.\n\n"
            "**`set` : La commande de configuration temporaire**\n"
            "   - **Fonction :** Permet de d√©finir les chemins vers les fichiers de GRUB pour que les autres commandes fonctionnent. Ces r√©glages ne sont valables que pour la session en cours.\n"
            "   - **Syntaxe :** `set root=(hdX,Y)` et `set prefix=(hdX,Y)/boot/grub`.\n"
            "   - **Exemple :** `set root=(hd0,gpt2)` et `set prefix=(hd0,gpt2)/boot/grub` pour indiquer √† GRUB de regarder sur cette partition.\n\n"
            "**`insmod` : La commande de chargement des modules**\n"
            "   - **Fonction :** Charge des modules GRUB. Le plus vital est le module `normal` pour acc√©der √† la pleine puissance de GRUB et afficher le menu.\n"
            "   - **Syntaxe :** `insmod normal`\n\n"
            "**`linux` et `initrd` : Les commandes de d√©marrage manuel**\n"
            "   - **Fonction :** Ces deux commandes sont les plus importantes pour lancer un syst√®me sans passer par le menu GRUB. Elles chargent le noyau (`linux`) et le syst√®me de fichiers initial (`initrd`).\n"
            "   - **Syntaxe :** `linux /boot/vmlinuz-... root=/dev/sdXY` et `initrd /boot/initramfs-...img`.\n"
            "   - **Note :** Le chemin doit correspondre aux fichiers que vous avez trouv√©s avec `ls`. Le param√®tre `root=/dev/sdXY` est crucial : il doit pointer vers le nom de votre partition racine, par exemple `/dev/sda2`.\n\n"
            "**`boot` : La commande d'ex√©cution**\n"
            "   - **Fonction :** D√©marre le syst√®me apr√®s que les commandes `linux` et `initrd` ont √©t√© ex√©cut√©es avec succ√®s."
        )
        self.set_content("Commandes de d√©pannage dans le mode `grub rescue`", content)
        
    def show_manual_boot(self):
        content = (
            "**Proc√©dure de D√©marrage Manuelle depuis `grub rescue`** üöÄ\n\n"
            "Suivez ces √©tapes dans l'ordre pour d√©marrer temporairement votre syst√®me et pouvoir le r√©parer.\n\n"
            "**√âtape 1 : Localiser les fichiers essentiels**\n"
            "   - √Ä l'invite `grub rescue>`, commencez par lister les p√©riph√©riques pour identifier vos partitions. Par exemple : `ls`.\n"
            "   - Ensuite, explorez chaque partition jusqu'√† ce que vous trouviez celle qui contient le r√©pertoire `/boot` et le sous-r√©pertoire `/boot/grub`. C'est votre partition de d√©marrage.\n"
            "   - `grub rescue> ls (hd0,gpt2)/`\n"
            "   - `grub rescue> ls (hd0,gpt2)/boot/grub`\n"
            "   - `grub rescue> ls (hd0,gpt2)/boot/` (pour trouver les noms des fichiers `vmlinuz` et `initramfs`).\n\n"
            "**√âtape 2 : D√©finir les variables d'environnement**\n"
            "   - Maintenant que vous avez trouv√© la bonne partition (par exemple, `(hd0,gpt2)`), dites √† GRUB o√π se trouve le reste de ses fichiers.\n"
            "   - `grub rescue> set root=(hd0,gpt2)`\n"
            "   - `grub rescue> set prefix=(hd0,gpt2)/boot/grub`\n\n"
            "**√âtape 3 : Tenter de revenir au menu normal**\n"
            "   - C'est la solution la plus simple si les fichiers de GRUB sont intacts mais que le chemin est perdu.\n"
            "   - `grub rescue> insmod normal`\n"
            "   - `grub rescue> normal`\n"
            "   - Si le menu de GRUB appara√Æt, vous pouvez d√©marrer votre syst√®me et passer √† l'√©tape de r√©paration d√©finitive.\n\n"
            "**√âtape 4 : D√©marrer manuellement le noyau**\n"
            "   - Si l'√©tape 3 √©choue, c'est que quelque chose ne va pas avec le module `normal` ou `grub.cfg`. Vous devez alors d√©marrer le noyau et l'initrd manuellement.\n"
            "   - **Attention :** Les noms des fichiers `vmlinuz` et `initramfs` d√©pendent de la version de votre noyau. Utilisez `ls` pour les trouver.\n"
            "   - `grub rescue> linux /boot/vmlinuz-5.18.10-200.fc36.x86_64 root=/dev/sda2 ro`\n"
            "   - `grub rescue> initrd /boot/initramfs-5.18.10-200.fc36.x86_64.img`\n"
            "   - `grub rescue> boot`"
        )
        self.set_content("Proc√©dure de D√©marrage Manuelle", content)

    def show_repair(self):
        content = (
            "**R√©paration D√©finitive apr√®s le d√©marrage** üîß\n\n"
            "Une fois que vous avez r√©ussi √† d√©marrer votre syst√®me, il est crucial de r√©parer GRUB pour √©viter que le probl√®me ne se reproduise.\n\n"
            "**1. R√©installer le chargeur de d√©marrage**\n"
            "   - Ouvrez un terminal. Les commandes varient selon que vous utilisez le BIOS/MBR ou l'UEFI.\n"
            "   - **Pour BIOS/MBR :** R√©installez GRUB sur le MBR du disque. `sdX` doit √™tre remplac√© par le nom de votre disque dur (ex: `sda`), et non une partition.\n"
            "     `sudo grub2-install /dev/sdX`\n"
            "   - **Pour UEFI :** R√©installez GRUB sur la partition ESP (`/boot/efi`).\n"
            "     `sudo grub2-install --target=x86_64-efi --efi-directory=/boot/efi`\n\n"
            "**2. G√©n√©rer le fichier de configuration**\n"
            "   - Une fois GRUB r√©install√©, vous devez cr√©er un nouveau fichier `grub.cfg` propre qui refl√®te l'√©tat actuel de votre syst√®me.\n"
            "   - `sudo grub2-mkconfig -o /boot/grub2/grub.cfg`\n\n"
            "**3. V√©rification**\n"
            "   - Apr√®s ces deux √©tapes, red√©marrez votre machine. Le menu de d√©marrage devrait appara√Ætre normalement et vous permettre de choisir votre syst√®me."
        )
        self.set_content("R√©paration D√©finitive", content)

    def show_architecture(self):
        content = (
            "**Impact de l'architecture x86 vs x64 sur GRUB** üñ•Ô∏è\n\n"
            "La diff√©rence d'architecture est cruciale car elle d√©termine les fichiers et les commandes que vous devez utiliser. Une erreur ici peut emp√™cher la r√©paration de fonctionner.\n\n"
            "**1. Fichiers du noyau et de l'initramfs**\n"
            "   - Les noms des fichiers du noyau (`vmlinuz`) et de l'initramfs (`initramfs`) refl√®tent l'architecture.\n"
            "   - **x64** : `vmlinuz-...**.x86_64**` ou `initramfs-...**.x86_64**.img`\n"
            "   - **x86** : `vmlinuz-...**.i686**` ou `initramfs-...**.i686**.img`\n"
            "   - **Cons√©quence** : Tenter de d√©marrer un noyau de la mauvaise architecture ne fonctionnera pas. Il est vital de v√©rifier les noms de fichiers avec `ls`.\n\n"
            "**2. Commandes de r√©installation de GRUB2**\n"
            "   - Les commandes pour r√©installer GRUB sur un syst√®me **UEFI** sont sp√©cifiques √† l'architecture.\n"
            "   - **x64** : `sudo grub2-install --target=**x86_64-efi** --efi-directory=/boot/efi`\n"
            "   - **x86** : `sudo grub2-install --target=**i386-efi** --efi-directory=/boot/efi`\n"
            "   - **Cons√©quence** : Utiliser la mauvaise commande installera un chargeur de d√©marrage incompatible, laissant le syst√®me non amor√ßable. Assurez-vous de conna√Ætre l'architecture de votre syst√®me avant de lancer ces commandes."
        )
        self.set_content("Architecture x86 vs x64", content)
        
    def show_disks(self):
        content = (
            "**Types de disques, de partitions et leur r√¥le** üíæ\n\n"
            "Une bonne compr√©hension des types de disques et des sch√©mas de partitionnement est fondamentale pour un d√©pannage r√©ussi.\n\n"
            "**1. Sch√©mas de partitionnement :**\n"
            "   - **MBR (Master Boot Record) :** Le sch√©ma de partitionnement historique. Il supporte jusqu'√† 4 partitions primaires et est limit√© √† des disques de 2 To. Le chargeur de d√©marrage est stock√© dans le premier secteur du disque, le MBR.\n"
            "   - **GPT (GUID Partition Table) :** Le standard moderne pour l'UEFI. Il supporte un nombre de partitions virtuellement illimit√© et des disques de grande taille. Le chargeur de d√©marrage est stock√© sur une partition d√©di√©e, l'**ESP (EFI System Partition)**.\n\n"
            "**2. Le r√¥le du chargeur de d√©marrage :**\n"
            "   - **BIOS :** Le BIOS (Basic Input/Output System) lit le MBR du disque principal. Le code du MBR contient une partie de GRUB2 qui pointe vers le reste des fichiers de GRUB. C'est l'amorce.\n"
            "   - **UEFI :** L'UEFI lit les informations de l'ESP pour savoir quel chargeur de d√©marrage lancer. GRUB2 se trouve dans un r√©pertoire de l'ESP et est directement ex√©cut√© par l'UEFI."
        )
        self.set_content("Types de disques et partitions", content)
        
    def show_troubleshooting(self):
        content = (
            "**Sc√©narios de D√©pannage courants et leurs solutions** üõ†Ô∏è\n\n"
            "**Sc√©nario 1 : `grub rescue` apr√®s une mise √† jour de noyau**\n"
            "   - **Probl√®me :** Le nouveau noyau n'est pas correctement configur√© ou les liens symboliques pointant vers le bon noyau sont cass√©s.\n"
            "   - **Solution :** Suivez la proc√©dure de **d√©marrage manuel** pour d√©marrer avec l'ancien noyau qui fonctionnait. Une fois le syst√®me d√©marr√©, r√©installez GRUB2 avec `grub2-mkconfig`.\n\n"
            "**Sc√©nario 2 : `grub rescue` apr√®s l'installation de Windows**\n"
            "   - **Probl√®me :** L'installation de Windows a √©cras√© le MBR ou l'ESP et a remplac√© GRUB2 par son propre chargeur de d√©marrage.\n"
            "   - **Solution :** D√©marrez sur un syst√®me live (cl√© USB Fedora) et suivez les instructions de la section **R√©paration D√©finitive** pour r√©installer GRUB2 sur le MBR ou l'ESP.\n\n"
            "**Sc√©nario 3 : `grub rescue` apr√®s la suppression d'une partition**\n"
            "   - **Probl√®me :** La partition contenant les fichiers GRUB ou le noyau a √©t√© supprim√©e ou format√©e.\n"
            "   - **Solution :** Si les donn√©es sont irr√©cup√©rables, vous devrez r√©installer le syst√®me d'exploitation. Si la partition est simplement d√©connect√©e ou corrompue, vous pouvez essayer de la r√©parer avec des outils comme `fsck` depuis un live CD. L'objectif est de rendre la partition de boot lisible pour GRUB."
        )
        self.set_content("Sc√©narios de D√©pannage", content)

    def show_faq(self):
        content = (
            "**FAQ et Notions Avanc√©es** ‚ùì\n\n"
            "**Q: Pourquoi les noms de partitions (ex: `sda2`) sont diff√©rents de ceux de GRUB (ex: `(hd0,gpt2)`) ?**\n"
            "   - R: GRUB utilise sa propre notation pour les disques et les partitions. `(hd0)` correspond g√©n√©ralement √† `sda`, `(hd1)` √† `sdb`, etc. De m√™me, `gpt2` correspond √† la deuxi√®me partition GPT (`sda2`).\n\n"
            "**Q: Que faire si ma partition `/boot` est s√©par√©e de ma partition racine ?**\n"
            "   - R: Dans ce cas, les commandes `set root` et `set prefix` doivent pointer vers la partition `/boot`, et non vers la partition racine. La commande `linux` devra toujours utiliser l'argument `root=/dev/sdX` pour pointer vers la partition racine r√©elle."
        )
        self.set_content("FAQ et Notions Avanc√©es", content)

if __name__ == "__main__":
    app = GrubApp()
    app.mainloop()